/*
The Standard Template Library (STL) - Generic Programming with Class Templates

Generic Programming with Class Templates
What is a C++ Class Template?
-Similar to function template, but at the class level
-Allows plugging-in any data type
-Compiler generates the appropriate class from the blueprint


Generic Programming with Class Templates
-Let's say we want a class to hold items wehre the item has a name and an integer

    class Item
    {
    private:
      std::string name;
      int value;
    public:
        Item(std::string name, int value)
            : name{name}, value{value}
            {
                
            }
            
        std::string get_name() const { return name; }
        int get_value() const { return value; }
    };
    
Generic Programming with Class Templates
-But we'd like our Item class to be able to hold any type of data in addition to the string
-We can't use overloaded class names
-We don't want to use dynamic polymorphism

Generic Programming with Class Tempaltes (blue print)
-We can replace the attribute we want to change with (T) in this case, can be an name

    class Item
    {
    private:
        std::string name;
        T value
    public:
        Item(std::string name, T value)
            : name{name}, value{value}
            {
                
            }
        std::string get_name() const { return name; }
        T get_value() const { return value; }
    };
    
Generic Programming with Class Templates
    
    template <typename T>
        class Item
        {
        private:
            std::string name;
            T value;
        public:
            Item(std::string name, T value)
                : name{name}, value{value}
                {
                    
                }
            std::string get_name() const { return name; }
            T get_value() const { return value; }
        };
        
-You have to add the template delcaration before the class declaration and
 say the typename for the parameter.

Generic Programming with Class Templates

    Item<int> item1 {"Larry", 1};
    Item<double> item2 {"House", 1000.0};
    Item<std::string> item3 {"Frank", "Boss"};
    std::vector<Item<int>> vec;
    
Multiple Types as Template Parameters
-We can have multiple template parameters
-And their types can be different

    template <typename T1, typename T2>
    struct My_Pair
    {
      T1 first;
      T2 second;
    };
    
Multiple Types as Template Parameters
    
    My_Pair <std::string, int> p1 {"Frank", 100};
    My_Pair<int, double> p2 {124, 13.6};
    std::vector<My_Pair<int, double>> vec
    
STL - Pair Class - std::pair

    #include <utility>
    
    std::pair<std::string, int> p1 {"Frank", 100};
    
    std::cout << p1.first;  //Frank
    std::cout << p1.second;  //100
    
-The pair class allows you to have two items of any class and is part of the STL 
*/