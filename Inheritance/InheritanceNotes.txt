//Inheritance

What is it and why is it used?
-Provides a method for creating new classes from existing classes
-The new class contains the data and behaviors of the existing class
-Allow for reuse of existing classes
-Allows us to focus on the common attricutes among a set of classes
-Allows new classes to modify behavios of existing classes to make it unique
    -without actually modifying the original class
    
Related Classes
-Player, Enemy, Level Boss, Hero, super Player, etc.
-Account, Savings Account, Checking Account, Trust ACcount, etc.
-Shape, Line, Oval, Circle, Square, etc.
-Person, Employee, Student, Faculty, Staff, Administrator, etc.

Accounts Classes
-Account
    -balance, deposit, withdraw
-Savings Account
    -balance, deposit, withdraw, interest rate
-Checking Account
    -balance, deposit, withdraw, minimum balance, per check fee
-Trust Account
    -balance, deposit, withdraw, interest rate
    
Accounts - Without Inheritance - Code Duplication
class Account {
    //balance, deposit, withdraw...
};

class Savings_Account {
    //balance, deposit, withdraw, interest rate...
};

class Checking_Account {
    //balance, deposit, withdraw, minimum balance, per check fee...
};

class Trust_Account {
    //balance, deposit, withdraw, interest rate...
};

Accounts - With Inheritance - Code Reuse
class Account {
    //balance, deposit, withdraw...
};

class Savings_Account : public Account {
    //interest rate, specialized withdraw...
};

class Checking_Account : public Account {
    //minimum balance, per check fee, specialized withdraw...
};

class Trust_Account : public Account {
    //interest rate, specialized withdraw....
};

Terminology
-Inheritance
    -Process of creating new classes from existing classes
    -Reuse mechanism
-Single Inheritance
    -A new class is created from another 'single' class
-Multiple Inheritance
    -A new class is created from two (or more) other classes
    
-Base Class (parent class, super class)
    -The class being extended or inherited from
    
-Derived class (child class, sub class)
    -The class being created from the Base class
    -Will inherit attricutes and operations from Base class
    
-"Is-A" relationship
    -Public inheritance
    -Derived classes are sub-types of their Base classes
    -Can use a derived class object wherever we use a base class object

-Generalization
    -Combining similar classes into a single, more general class based on common attributes
    
-Specialization
    -Creating new classes from existing classes proving more specialized attributes or operations
    
-Inheritance or Class Hierarchies
    -Organization of our inheritance relationships
    
Public Inheritance vs. Composition
-Both allow reuse of existing classes

-Public Inheritance
    -"is-a" relationship
        -Employee 'is-a' Person
        -Checking Account 'is-a' Account
        -Circle 'is-a' Shape
        
-Composition
    -"has-a" relationship
        -Person "has-a" Account
        -Player "has-a" Special Attack
        -Circle "has-a" Location
        
-Composition Declaration
    class Person {
    private:
        std::string name; //has-a name
        Account account;  //has-a account
    };
    
