//Inheritance - Using and Redefining Base Class Methods

Using and redefining Base class methods/member functions
-Derived class can directly invoke Base class methods
-Derived class can override or redefine Base class methods
-Very powerful in the context of polymorphism

Example) Using and redefining Base class methods
class Account {
public:
    void deposit(double amount) { balance += amount; }
};

class Savings_Account : public Account {
public:
    void deposit(double amount) {
        //Redefine Basee class method
        amount += some_interest;
        Account::deposit(amount); //invoke call Base class method
    }
};

Static binding of method calls
-Binding of which method to use is done at compile time
    -Default binding for C++ is static
    -Derived class objects will use Derived::deposit
    -But, we can explicitly invoke Base::deposit from Derived::deposit
    -OK, but limited - much more powerful approach is dynamic binding which we will see in the next section
    
Example) Static binding of method calls

Base b;
b.deposit(1000.0);  //Base::deposit

Derived d;
d.deposit(1000.);  //Derived::deposit

Base *ptr = new Derived();
ptr->deposit(1000.0);  //Base::deposit will be called because the pointer is a pointer to a Base class object