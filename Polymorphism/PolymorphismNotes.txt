//Polymorphism

Fundamental to Object-Oriented Programming

Polymorphism
    -Compile-time / early binding / static binding - before the program executes
    -Run-time / late binding /dynamic binding - as the program executes
    
Runtime polymorphsim
    -Being able to assign different meantings to the same function at run-time
    
Allow us to program more abstractly
    -Think general vs. specific
    -Let C++ figure out which function to call at run-time
    
Not the default in C++, run-time polymorphism is achieved via
    -Inheritance
    -Base class pointers or references
    -Virtual functions
    
Example) An non-polymorphic example - Static Binding
Account a; 
a.withdraw(1000);  //Account::withdraw()

Savings b;
b.withdraw(1000);  //Savings::withdraw()

Checking c;
c.withdraw(1000);  //Checking::withdraw()

Trust d;
d.withdraw(1000);  //Trust::withdraw()

Account *p = new Trust();
p-> withdraw(1000);  //ACcount::withdraw() should be Trust::withdraw()

Example) A polymorphic example - Dynamic binding
Account a;
a.withdraw(1000);  //Account::withdraw()

Savings b;
b.withdraw(1000);  //Savings:;withdraw()

Checking c;
c.withdraw(1000);  /Checking::withdraw()

Trust d;
d.withdraw(1000);  //Trust::withdraw()

Account *p = new Trust();
p->withdraw(1000);  //Trust::withdraw()