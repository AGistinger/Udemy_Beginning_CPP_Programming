/*
The Standard Template Library (STL) - What is the STL?

What is the STL?
-Alibrary of powerful, reusable, adaptable, generaic classes and functions
-Implemented using C++ templates
-Implements common data structures and algorithms
-Huge class library!!
-Alexander Stepanov (1994)

Why use the STL?
-Assortment of commonly used containers
-Known time and size complexity
-Tried and tested - Reusability!!!
-Consistent, fast, and type-safe
-Extensible

Elements of the STL:
-Containers
    -Collections of objects or primitive types
    (array, vector, deque, stack, set, map, etc.)
    
-Algorithms
    -Functions for processing sequences of elements from containers
    (find, min/max, count, accumulate, sort, etc.)
    
-Iterators
    -Generate sequences of element from containers
    (forward, reverse, by value, by reference, constant, etc.)
    
-Functors (not covered)
-Allocators (not covered)

A simple example:

    #include <vector>
    #include <algorithm>
    
    std::vector<int> v {1, 5, 3};
    
A simple example: (Sort Algorithm)

    std::sort(v.begin(), v.end());
    
    for(auto elem : v)
    {
        std::cout << elem << std::endl;
    }
    
    output:
    1
    3
    5
    
-This will sort the vector with the sort algorithim (needs objects), you can use iterator to do that
 v.begin() and v.end(), this provides the sort algorithm with the integers in the vector
 from the beginning element to the ending element.

-The elements in the vector will now be sorted

A simple example: (Reverse Algorithm)

    std::reverse(v.begin(), v.end());
    
    for(auto elem : v)
    {
        std::cout << elem << std::endl;
    }
    
    output:
    5
    3
    1
    
-The reverse algorithm will reverse the sort
-The range based for loop for(auto c : string) is itself an iterator

A simple example (Accumulate)

    int sum {};
    
    sum = std::accumulate(v.begin(), v.end(), 0);
    std::cout << sum << std::endl;
    
    output:
    9 //1 + 3 + 5
    
-This will add up all the integers within the vector when given begin and end, and store the 
 result in a variable called sum.
-The Accumulate argorithm has 3 parameters, the first 2 are iterators, the 3rd parameter is what 
 the running sum will start at (0) in this case.
-The type of the 3rd parameter is very important if you want to sum integers use (0),
 if you want to sum doubles use (0.0)

Types of Containers
-Sequence containers
    -array, vector, list, forward_list, deque
    -maintain the order of the inserted elements

-Associative containers
    -set, multi set, map, multi map
    -insert elements in a predefined order or no order at all
    -set is a collection of elements where there are no duplicates
     there may be an order associated with it or not, we have the option to choose
    -map is like a dictionary where you associate a word with its definition
    -there are many variants of this category, you can have ordered sets, unordered sets
    -sets that allow duplicates (multi set), maps that allow duplicates (multi map), etc.
    
-Container adapters
    -stack, queue, priority queue
    -variations of other containers
    -does not support iterators (cannot use STL algorithms)
    
-Input iterators - from the container to the program
-Output iterators - from the program to the container (write element to container)
-Forward iterators - navigate one item at a time in one direction (read or write any element)
-Bi-directional iterators - navigate one item at a time in both directions
-Random access iterators - directly asses a container item

Types of Algorithms
-About 60 algorithms in the STL
-Non-modifying
-Modifying
*/