//Inheritance - Passing Arguments to Base Class Constructors

Passing Arguments to Base Class Constructors

-The Base part of a Derived class must be initialized first
-How can we control exactly which Base class constructor is used during initialization?
-We can invoke the whichever Base class constructor we wish in the initialization
list of the Derived class

Example) Passing Arguments to Base Class Constructors

class Base{
public:
    Base();
    Base(int);
};

Derived::Derived(int x)
    :Base(x), {optional initializers for Derived}
    {
        //code
    }
    
Example) Constructors and Class Initialization

class Base{
private:
    int value;
public:
    Base()
        :value{0}
        {
            cout << "Base no-args constructor" << endl;
        }
        
    Base(int x)
        : value{x}
        {
            cout << "int Base constructor" << endl;
        }
};

class Derived : public Base{
private:
    int doubled_value;
public:
    Derived()
        : Base{}, doubled_value{0}
        {
            cout << "Derived no-args constructor" << endl;
        }
        
        Derived(int x)
            : Base{x}, doubled_value {x * 2}
            {
                cout << "int Derived constructor" << endl;
            }
};