//Smart Pointers - Unique Pointer

unique_ptr

-Simple smart pointer - very efficient!

-unique_ptr<T>
    -Points to an object of type T on the heap
    -It is unique - there can only be one unique_ptr<T> pointing to the object on the heap
    -Owns what it points to
    -Cannot be assigned or copied
    -CAN be moved
    -When the pointer is destroyed, what it points to is automatically destroyed
    
Example) Unique_ptr syntax

{
    std::unique_ptr<int> p1 {new int {100}};
    std::cout << *p1 << std::endl;  //100
    *p1 = 200;
    std::cout << *p1 << std::endl;  /200
}  //automatically deleted

Example) unique_ptr Methods

{
    std::unique_ptr<int> p1 {new int {100}};
    std::cout << p1.get() << std::endl;  //0x564388 - returns a pointer to the managed object
    p1.reset();  //p1 is now nullptr
    
    if(p1) //checks if pointer is initialized
        std::cout << *p1 << std:: endl;  //won't execute since it is now nullptr
} //automatically deleted

Example) unique_ptr - user defined classes

{
    std::unique_ptr<Account> p1 {new Account {"Larry"}};
    std::cout << *p1 << std::endl; //display account
    
    p1->deposit(1000);
    p1->withdraw(500);
} //automatically deleted

Example) unique_ptr - vectors and move

{
    std::vector<std::unique_ptr<int>> vec;
    
    std::unique_ptr<int> ptr {new int {100}};
    
    vec.push_back(ptr);  //Error - copy not allowed
    vec.push_back(std::move(ptr));
} //automatically deleted

Example) unique_ptr - make_unique (C++14)

{
    //make_unique(function) returns unique pointer of the specified type, allows to pass initialization values into the constructor for the managed option
    std::unique_ptr<int> p1 = make_unique<int> (100);
    
    std::unique_ptr<Account> p2 = make_unique<Account> ("Curly", 5000);
   
    //auto keyword allows the compiler to deduce the type of p3 based on what make_unique returns
    auto p3 = make_unique<Player> ("Hero", 100, 100);
} //automaticaly deleted