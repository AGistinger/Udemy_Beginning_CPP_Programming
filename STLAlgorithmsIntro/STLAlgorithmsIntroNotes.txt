/*
The Standard Template Library (STL) - Introduction to STL Algorithms

Algorithms
-STL algorithms work on sequences of container elements 
 provided to them by an iterator
-STL has many common and useful algorithms
-Too many to describe in this section
    -http://en.cppreference.com/w/cpp/algorithm
-Many algorithms require extra information in order to do their work
    -Functors(function objects)
    -Function pointers
    -Lambda expressions (C++11)
    
Algorithms and Iterators
    #include <algorithm>
    
-Different containers support different types of iterators
    -Determines the types of algorithms supported
-All STL algorithms expect iterators as arguments
    -Determines the dequence obtained from the container
    
Iterator Invalidation
-Iterators point to container elements
-It's possible iterators become invalid during processing
-Suppose we are iterating over a vector of 10 elements
    -And we clear() the vector while iterating? What happens?
    -Undefined behavior - our iterators are pointing to invalid locations
    
Example algorithm - find with primitive types
-The find algorithm tries to locate teh first occurrence of an element in a container
-Lots of variations
-Returns an iterator pointing to the located element or end()

    std::vector<int> vec {1, 2, 3};
    auto loc = std::find(vec.begin(), vec.end(), 3);  //loc is an interator to a vector of int
    
    if(loc != vec.end())  //found it!
    {
        std::cout << *loc << std::endl; //3
    }
    
Example algorithm - find with user-defined types
-Find needs to be able to compare object
-operator== is used and must be provided by your class

    std::vector<Player> team { // assume initialized // }
    Player p {"Hero", 100, 12};
    
    std::vector<Player>::iterator loc = std::find(team.begin(), team.end(), p);
    
    if(loc != vec.end())  //found it!
    {
        std::cout << *loc << std::endl; //operator<< called
    }

Example algorithm - for_each
-for_each algorithm applies a function to each element in the iterator sequence
-Function must be provided to the algorithm as:
    -Functor (function object)
    -Function pointer
    -Lambda expression (C++11)
-Let's square each element

for_each - Using a Functor
    
    struct Square_Functor
    {
      void operator() (int x) //overload () operator
      {
          std::cout << x * x << " ";
      }
    };
    
    Square_Functor square;  //Function object
    std::vector<int> vec {1, 2, 3, 4};
    
    std::for_each(vec.begin(), vec.end(), square);
    //1 4 9 16
    
for_each - Using a Function Pointer

    void square(int x)  //function
    {
        std::cout << x * x << " ";
    }
    
    std::vector<int> vec {1, 2, 3, 4};
    
    std::for_each(vec.begin(), vec.end(), square);
    //1 4 9 16
    
for_each - Using a Lambda Expression

    std::vector<int> vec {1, 2, 3, 4};
    
    std::for_each(vec.begin(), vec.end(),
         [] (int x) {std::cout << x * x << " "; })  //lambda
    //1 4 9 16

Lambda expressions:
-Consist of a pair of square brackets
-Followed by the parameters that will be passed into the lambda expression in paranthesis ()
-Then followed by the body of code you want to execute in a block {}
*/