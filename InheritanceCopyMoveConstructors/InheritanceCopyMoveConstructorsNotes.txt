//Inheritance - Copy/Move Constructors and Opeartor= with Inheritance

Copy/Move constructors and overloaded operator=
-Not inherited from the Base class
-You may not need to provide your own
    -Compiler-provided versions may be just fine
-We can explicitly invote the Base class versions from the Derived class

Copy Constructor
-Can invoke Base copy constructor explicitly
    -Dervied object 'other' will be sliced
-Expects a reference to a base object
-'is a' inheritance a derived is a base
-Slicing - slices out the base part of the 'other' object
    -slicing can sometimes cause issues
    
Derived::Derived(const Derived &other)
    : Base(other), {Derived initialization list}
    {
        //code
    }
    
Example) Copy Constructors - Base

class Base{
private:
    int value;
public:
    //constructors
    
    Base(const Base &other)
        :value{other.value}
        {
            cout << "Base copy constructor" << endl;
        }
};

Example) Copy Constructors - Derived

class Derived : public Base{
private:
    int doubled_value
public:
    //constructors
    
    Derived(const Derived &other)
        :Base(other), doubled_value{other.doubled_value}
        {
            cout << "Derived copy constructor" << endl;
        }
};

The Move Constructor works the same way as the copy constructor

Example) Operator= (Copy Assignment) - Base Class

class Base{
private:
    int value;
public:
    //constructors
    Base &operator=(const Base &rhs) {
        if(this != rhs) {
            value = rhs.value; //assign
        }
        return *this;
    }
};

Example) Operator= (Copy Assignment) - Derived Class

class Derived : public Base {
private:
    int doubled_value;
public:
    //constructors
    
    Derived &operator=(const Derived &rhs) {
        if(this != rhs) {
            Base::operator=(rhs);  //Assign Base part
            doubled_value = rhs.doubled_value; //Assign Derived part
        }
        return *this;
    }
};

The Move assignment works in a similar manner

Copy/Move constructors and overloaded operator=
-Often you do not need to provide your own
-If you DO NOT define them in Derived
    -then the compiler will create them and automatically call the base classes version
-If you DO provide Derived versions
    -then YOU MUST invoke the Base versions explicitly yourself
-Be careful with raw pointers
    -Especially if Base and Derived each have raw pointers
    -Provide them with deep copy semantics